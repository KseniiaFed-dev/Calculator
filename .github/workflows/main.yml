name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main  # Триггер при пуше в ветку main
  pull_request:
    branches:
      - main  # Триггер на создание PR в ветку main

jobs:
  build:
    runs-on: ubuntu-latest  # Операционная система для сборки

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Шаг для извлечения кода из репозитория

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'  # Устанавливаем JDK 11
        distribution: 'temurin'  # Дистрибутив JDK (Temurin)

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository  # Кешируем зависимости Maven для ускорения сборки
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn clean install  # Сборка проекта с помощью Maven

    - name: Run tests
      run: mvn test  # Запуск тестов с помощью Maven

    - name: Deploy to remote server via SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Секретный SSH ключ для доступа к серверу
        SERVER_IP: ${{ secrets.SERVER_IP }}  # IP-адрес сервера
        SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}  # Имя пользователя на сервере
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem  # Устанавливаем права на ключ
        ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP << 'EOF'
          cd /path/to/your/app  # Переходим в директорию на сервере
          git pull origin main  # Берем последние изменения
          mvn clean install  # Собираем проект на сервере
          java -jar target/your-app.jar  # Запуск приложения
        EOF
